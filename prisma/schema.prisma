// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id         String   @id @default(cuid())
  type       String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  punishment Int

  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?
}

model Edition {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int

  Cards           Card[]
  userCollections UserCollection[]
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCollections UserCollection[]
  players         Player[]
  game            Game?
}

model Player {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkId   String
  gameId    String
  name      String

  user User @relation(fields: [clerkId], references: [clerkId])
  game Game @relation(fields: [gameId], references: [id])
}

model UserCollection {
  clerkId String
  user    User   @relation(fields: [clerkId], references: [clerkId])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@unique([clerkId, collectionId])
}

model Game {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  status    String

  clerkId String?  @unique
  user    User?    @relation(fields: [clerkId], references: [clerkId])
  Players Player[]
}

// model AssignedCard {
//   id               String   @id @default(cuid())
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//   remainingRepeats Int
//   gameId           String
//   cardId           String
//   userId           String
//   status           String

//   game Game @relation(fields: [gameId], references: [id])
//   card Card @relation(fields: [cardId], references: [id])
//   user User @relation(fields: [userId], references: [id])
// }
