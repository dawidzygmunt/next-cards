// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id         String   @id @default(cuid())
  type       String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  punishment Int

  Collection   Collection?    @relation(fields: [collectionId], references: [id])
  collectionId String
  AssignedCard AssignedCard[]
}

model Edition {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Collection Collection[]
}

model Collection {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int
  editionId String

  Cards           Card[]
  userCollections UserCollection[]
  Edition         Edition          @relation(fields: [editionId], references: [id])
  Game            Game[]
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCollections UserCollection[]
  game            Game?
}

model Player {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gameId        String
  questionValue Int            @default(0)
  game          Game           @relation(fields: [gameId], references: [id])
  AssignedCard  AssignedCard[]
}

model UserCollection {
  clerkId      String
  user         User       @relation(fields: [clerkId], references: [clerkId])
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@unique([clerkId, collectionId])
}

model Game {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  status       String   @default("pending")
  collectionId String

  Collection Collection @relation(fields: [collectionId], references: [id])

  clerkId String   @unique
  user    User?    @relation(fields: [clerkId], references: [clerkId])
  Players Player[]

  AssignedCard AssignedCard[]
}

model AssignedCard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    String
  cardId    String
  playerId  String

  game   Game   @relation(fields: [gameId], references: [id])
  card   Card   @relation(fields: [cardId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}
